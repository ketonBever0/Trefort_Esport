// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  // header    String
  content   String?  @db.LongText
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Ban {
  id       Int      @id @default(autoincrement())
  banStart DateTime @default(now())
  banEnd   DateTime
  reason   String
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
}

model Clan {
  id        Int     @id @default(autoincrement())
  name      String
  logo      String?
  email     String?
  status    String
  members   User[]  @relation(name: "members")
  creator   User    @relation(name: "creator", fields: [creatorId], references: [id])
  creatorId Int     @unique
}

model Organization {
  id               Int     @id @default(autoincrement())
  events           Event[]
  name             String
  picture          String
  location         String
  email            String  @unique
  phoneNumber      String
  type             String
  status           String
  description      String?
  members          User[]  @relation(name: "orgMembers")
  representative   User    @relation(name: "orgRep", fields: [representativeId], references: [id])
  representativeId Int     @unique
}

model Event {
  id             Int           @id @default(autoincrement())
  name           String
  startDate      DateTime
  endDate        DateTime
  sponsor        String?
  description    String        @db.Text()
  organizers     Organization  @relation(fields: [organizationId], references: [id])
  organizationId Int
  competitions   Competition[]
}

model Competition {
  id                Int           @id @default(autoincrement())
  plannedStartDate  DateTime
  startDate         DateTime?
  endDate           DateTime?
  name              String
  game              String
  platform          String
  registrationStart DateTime?
  registrationEnd   DateTime
  type              String
  description       String
  event             Event         @relation(fields: [eventId], references: [id])
  eventId           Int
  sessionTeams      SessionTeam[]
}

model SessionTeam {
  id            Int         @id @default(autoincrement())
  position      Int?
  competition   Competition @relation(fields: [competitionId], references: [id])
  competitionId Int
  members       User        @relation(fields: [memberId], references: [id])
  memberId      Int
}

model User {
  id                           Int           @id @default(autoincrement())
  email                        String        @unique
  username                     String        @unique
  password                     String
  profilePicture               String?
  firstName                    String
  lastName                     String
  address                      String
  educationIdNum               Int?          @unique
  status                       String        @default("active")
  registrationDate             DateTime?     @default(now())
  lastLoginDate                DateTime?     @default(now())
  description                  String?
  posts                        Post[]
  memberOfOrganization         Organization? @relation(name: "orgMembers", fields: [memberOfOrganizationId], references: [id])
  memberOfOrganizationId       Int?
  representativeOfOrganization Organization? @relation(name: "orgRep")
  banned                       Ban[]
  memberOfClan                 Clan?         @relation(name: "members", fields: [memberOfClanId], references: [id])
  memberOfClanId               Int?
  creatorOfClan                Clan?         @relation(name: "creator")
  sessionTeams                 SessionTeam[]
  userRoles                    UserRole[]
}

model UserRole {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  description    String?
  userRole       UserRole[]
  rolePermission RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String
  roles       RolePermission[]
}

// model Roles {
//   id     Int    @id @default(autoincrement())
//   name   String @unique
//   // permissions Json
//   users  User   @relation(fields: [userId], references: [id])
//   userId Int
// }
