// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Clan {
  id        Int           @id @default(autoincrement())
  leaderId  Int           @unique()
  leader    User          @relation("Leader", fields: [leaderId], references: [id])
  name      String        @db.VarChar(255)
  logo      String?       @db.VarChar(255)
  clanEmail String?       @db.VarChar(255)
  status    String        @default("active") @db.VarChar(255)
  cTeams    SessionTeam[]
  users     ClanUser[]

  @@map("clans")
}

model Organization {
  id            Int                @id @default(autoincrement())
  name          String             @db.VarChar(255)
  orgUsers      User[]             @relation("OrgUsers")
  picture       String             @db.VarChar(255)
  location      String             @db.VarChar(255)
  email         String             @unique @db.VarChar(255)
  phoneNumber   String             @db.VarChar(255)
  type          String             @db.VarChar(255)
  status        String             @default("pending") @db.VarChar(255)
  contributions EventContributor[]
  description   String             @db.Text()

  @@map("organizations")
}

model EventContributor {
  id      Int          @id @default(autoincrement())
  orgId   Int
  org     Organization @relation(fields: [orgId], references: [id])
  eventId Int
  event   Event        @relation(fields: [eventId], references: [id])

  @@map("eventcontributors")
}

model Event {
  id           Int                @id @default(autoincrement())
  name         String             @unique @db.VarChar(255)
  startDate    DateTime
  endDate      DateTime
  competitions Competition[]
  contributors EventContributor[]
  location     String             @db.VarChar(255)
  description  String             @db.Text()

  @@map("events")
}

model Post {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  publishedAt DateTime?
  title       String    @db.VarChar(255)
  header      String    @db.VarChar(255)
  content     String    @db.Text()

  @@map("posts")
}

model ClanUser {
  id     Int     @id @default(autoincrement())
  userId Int
  user   User    @relation(fields: [userId], references: [id])
  clanId Int
  clan   Clan    @relation(fields: [clanId], references: [id])
  member Boolean @default(false)

  @@map("clanusers")
}

model User {
  id                        Int               @id @default(autoincrement())
  userClan                  ClanUser[]
  leader                    Clan?             @relation("Leader")
  userOrg                   Organization?     @relation("OrgUsers", fields: [orgId], references: [id])
  orgId                     Int?
  representative            Boolean           @default(false)
  username                  String            @unique @db.VarChar(255)
  profilePicture            String?           @db.VarChar(255)
  email                     String            @unique @db.VarChar(255)
  firstName                 String            @db.VarChar(255)
  lastName                  String            @db.VarChar(255)
  password                  String            @db.VarChar(255)
  address                   String            @db.VarChar(255)
  educationNumber           Int?              @db.Int
  status                    String?           @default("active") @db.VarChar(255)
  registrationDate          DateTime          @default(now())
  lastLogin                 DateTime          @default(now())
  userRoles                 UserRole[]
  competitionParticipations SessionTeamUser[]
  banned                    Ban?
  description               String?           @db.Text()
  Post                      Post[]

  @@map("users")
}

model UserRole {
  id     Int  @id @default(autoincrement())
  roleId Int  @db.Int
  role   Role @relation(fields: [roleId], references: [id])
  userId Int  @db.Int
  user   User @relation(fields: [userId], references: [id])

  @@map("userroles")
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  userRoles UserRole[]

  @@map("roles")
}

model SessionTeam {
  id            Int               @id @default(autoincrement())
  teamName      String            @db.VarChar(255)
  clanId        Int?
  clan          Clan?             @relation(fields: [clanId], references: [id])
  password      String?           @db.VarChar(255)
  competitionId Int
  competition   Competition       @relation(fields: [competitionId], references: [id])
  members       SessionTeamUser[]
  public        Boolean?          @default(true)
  points        Int?
  description   String?           @db.Text()

  @@map("sessionteams")
}

model SessionTeamUser {
  id     Int         @id @default(autoincrement())
  userId Int
  user   User        @relation(fields: [userId], references: [id])
  teamId Int
  team   SessionTeam @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("sessionteamusers")
}

model Competition {
  id                Int           @id @default(autoincrement())
  eventId           Int           
  event             Event         @relation(fields: [eventId], references: [id])
  plannedStartDate  DateTime
  startDate         DateTime?
  endDate           DateTime?
  name              String        @db.VarChar(255)
  maxMemberCount    Int?
  game              String        @db.VarChar(255)
  platform          String        @db.VarChar(255)
  registrationStart DateTime?
  registrationEnd   DateTime
  sessionTeams      SessionTeam[]
  competitionType   String        @db.VarChar(255)
  description       String        @db.Text()

  @@map("competitions")
}

model Ban {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique
  reason      String   @db.VarChar(255)
  status      String   @db.VarChar(255)
  bannedUntil DateTime

  @@map("bans")
}
